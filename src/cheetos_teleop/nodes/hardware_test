#!/usr/bin/env python
#-*- coding:utf-8 -*-

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Float64 as joint_command
from sensor_msgs.msg import Imu
import sys, select, os
if os.name == 'nt':
    import msvcrt
else:
    import tty, termios

BURGER_MAX_LIN_VEL = 1000000
BURGER_MAX_ANG_VEL = 1000000

WAFFLE_MAX_LIN_VEL = 0.26
WAFFLE_MAX_ANG_VEL = 1.82

LIN_VEL_STEP_SIZE = 0.05
ANG_VEL_STEP_SIZE = 0.1

msg = """
s for spin
l for go straight
b for go back straight
x for stop

CTRL-C to quit
"""

e = """
Communications Failed
"""

def getKey():
    if os.name == 'nt':
        return msvcrt.getch()

    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    if turtlebot3_model == "burger":
        vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
        vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    else:
        vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)

    return vel

def checkAngularLimitVelocity(vel):
    if turtlebot3_model == "burger":
        vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
        vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    else:
        vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)

    return vel

def imu_Callback(msg):

    print msg.linear_acceleration.z

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('turtlebot3_teleop')
    pub_fl_wheel = rospy.Publisher('cheetos/front_left_wheel_velocity_controller/command', joint_command, queue_size=10)
    pub_fr_wheel = rospy.Publisher('cheetos/front_right_wheel_velocity_controller/command', joint_command, queue_size=10)
    imu = rospy.Subscriber('/imu', Imu, imu_Callback)

    turtlebot3_model = rospy.get_param("model", "burger")

    status = 0
    current_move = 'x'
    action_count = 0
    target_linear_vel   = 0.0
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0
    target_angle = 0.0

    try:
        print(msg)
        while(1):
            key = getKey()
            if key == 's':
                action_count = 0
                current_move = 's'
                print("Spinning…")
            elif key == 'l':
                action_count = 0
                current_move = 'l'
                print("Going forward…")
            elif key == 'b':
                action_count = 0
                current_move = 'b'
                print("Going backward…")
            elif key == 'x' :
                current_move = 'x'
                target_linear_vel   = 0.0
                control_linear_vel  = 0.0
                target_angular_vel  = 0.0
                control_angular_vel = 0.0
                print(vels(target_linear_vel, target_angular_vel))
            else:
                if (key == '\x03'):
                    break

            if action_count > 50:
                print("Stop!")
            TIME_STEP = 50
            if current_move == 's' and action_count < TIME_STEP:
                target_linear_vel = 0
                target_angular_vel = 2
            elif current_move == 'l' and action_count < TIME_STEP:
                target_linear_vel = -2
                target_angular_vel = 0
            elif current_move == 'b' and action_count < TIME_STEP:
                target_linear_vel = 2
                target_angular_vel = 0
            else:# current_move == 'x' or else
                target_linear_vel   = 0.0
                control_linear_vel  = 0.0
                target_angular_vel  = 0.0
                control_angular_vel = 0.0
            if status == 20 :
                print(msg)
                status = 0
            command_left_wheel = joint_command()
            command_right_wheel = joint_command()
            command_actuator = joint_command()

            command_left_wheel.data = 50.0*target_linear_vel - 5*10.0*target_angular_vel
            command_right_wheel.data = 50.0*target_linear_vel + 5*10.0*target_angular_vel
            command_actuator.data = target_angle
            pub_fl_wheel.publish(command_left_wheel)
            pub_fr_wheel.publish(command_right_wheel)
            pub_actuator.publish(command_actuator)
            action_count += 1
    except:
        print(e)

    finally:
            command_left_wheel = joint_command()
            command_right_wheel = joint_command()
            command_actuator = joint_command()

            command_left_wheel.data = 0.0
            command_right_wheel.data = 0.0
            pub_fl_wheel.publish(command_left_wheel)
            pub_fr_wheel.publish(command_right_wheel)
            pub_actuator.publish(command_actuator)
    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
